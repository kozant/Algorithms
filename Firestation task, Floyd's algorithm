#include <vector>
#include <iostream>
#include <cstdlib>
#include <conio.h>
#include <algorithm>

using namespace std;

vector<int> d(100);
vector<bool> u(100);
vector < vector<int> > g(100, vector<int>(100));
int n, m, s, f;

void floyd() {

	vector < vector<int> > d(100, vector<int>(100));
	d = g;
	for (int k = 1; k < n + 1; k++)
		for (int i = 1; i < n + 1; i++)
			for (int j = 1; j < n + 1; j++)
				d[i][j] = min(d[i][j], d[i][k] + d[k][j]);

	int ans = 0;
	int min_max_dist = 1111111;
	for (int i = 1; i < n + 1; i++) {
		int max_dist = 0;
		cout << i << " vertex distances:" << endl;
		for (int j = 1; j < n + 1; j++) {
			if (d[i][j] > max_dist) {
				max_dist = d[i][j];
			}
			if (i == j) { cout << "0 "; }
			else cout << d[i][j] << " ";
		}

		cout << "The most remote area for the " << i << " vertex: " << max_dist;
		if (min_max_dist > max_dist) {
			min_max_dist = max_dist;
		}
		cout << endl;
	}

	cout << "Number/Numbers of the central intersection: ";
	for (int i = 1; i < n + 1; i++) {
		int max_dist = 0;
		for (int j = 1; j < n + 1; j++) {
			if (d[i][j] > max_dist) {
				max_dist = d[i][j];
			}
		}
		if (max_dist == min_max_dist) { cout << i << " "; }
	}
	cout << endl << "The most remote area for it: " << min_max_dist << endl;
}


int main()
{
	cout << "Enter the number of vertices and edges of the graph: ";
	cin >> n >> m;
	for (int i = 0; i < n + 1; i++) for (int j = 0; j < n + 1; j++) g[i][j] = 1111111;
	cout << "Enter graph info: " << endl;
	for (int i = 0; i < m; i++) {
		int a, b, c;
		cin >> a >> b >> c;
		g[a][b] = c;
		g[b][a] = c;
	}

	while (true) {
		int variant;
		cout << "------" << endl;
		cout << "Menu: " << endl;
		cout << "1. Floyd run" << endl;
		cout << "2. Exit" << endl;
		cout << "Your choise: ";
		cin >> variant;
		switch (variant)
		{
		case 1:
		{
			floyd();
			break;
		}

		case 2:
		{
			return 0;
			break;
		}
		}
	}
	return 0;
}
