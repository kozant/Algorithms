#include <vector>
#include <iostream>
#include <cstdlib>
#include <conio.h>

using namespace std;

int ans[1000];
vector < vector<int> > g(1000, vector<int>(1000));
vector < vector<int> > gReverse(1000, vector<int>(1000));
int ansKol, n, m;

void findEulerPath(int v) {
	for (int i = 1; i < n + 1; i++) {
		if (g[v][i] > 0) {
			g[v][i] --;
			g[i][v] --;
			findEulerPath(i);
		}
	}
	ansKol++;
	ans[ansKol] = v;
}


int main()
{
	cout << "Enter the number of vertices and edges of the graph: ";
	cin >> n >> m;
	for (int i = 0; i < m; i++) {
		int a, b;
		cin >> a >> b;
		if (a > n) {
			n = a;
		}
		if (b > n) {
			n = b;
		}
		g[a][b] ++;
		g[b][a] ++;
	}

	gReverse = g;

	bool flagFirstTime = true;

	while (true) {
		int variant, a, b;
		cin.get();
		cout << "------" << endl;
		cout << "Menu: " << endl;
		cout << "1. Add edge" << endl;
		cout << "2. Delete edge" << endl;
		cout << "3. Find Euler Path" << endl;
		cout << "4. Add vertex" << endl;
		cout << "5. Delete vertex" << endl;
		cout << "6. Print matrix" << endl;
		cout << "7. Exit" << endl;
		cout << "Your choice: ";
		cin >> variant;
		switch (variant)
		{
		case 1:
		{
			cout << "Enter new edge: ";
			cin >> a >> b;
			if (a > n) {
				n = a;
			}
			if (b > n) {
				n = b;
			}
			gReverse[a][b] ++;
			gReverse[b][a] ++;
			break;
		}
		case 2:
		{
			cout << "Enter edge vertices to remove: " << endl;
			cin >> a >> b;
			gReverse[a][b] --;
			gReverse[b][a] --;
		}
		case 3:
		{
			g = gReverse;
			ansKol = 0;
			for (int i = 0; i < 1000; i++) ans[i] = 0;
			vector<int> deg(1000);
			for (int i = 1; i < n + 1; i++) {
				for (int j = 1; j < n + 1; j++) {
					deg[i] += g[i][j];
				}
			}

			bool flag = false;
			for (int i = 1; i < n + 1; i++) {
				if (deg[i] % 2 != 0) {
					flag = true;
					cout << "Vertex with an even degree. There can not be built Euler's cycle" << endl;
					break;
				}
			}
			flagFirstTime = false;
			if (!flag) {
				findEulerPath(1);
				cout << "Euler cycle: " << endl;
				for (int i = ansKol; i >= 1; i--) { cout << ans[i] << " "; }
				cout << endl;
			};
			break;
		}

		case 4:
		{
			int ver;
			cout << "Enter number of vertex to add: " << endl;
			cin >> ver;
			if (ver > n) { 
				n = ver; 
			}
			break;
		}

		case 5:
		{
			int ver;
			cout << "Enter number of vertex to delete: " << endl;
			cin >> ver;
			for (int i = 1; i < n + 1; i++) {
				gReverse[ver][i] = 0;
				gReverse[i][ver] = 0;
			}
			break;
		}
		
		case 6:
		{
			cout << "Current matrix: " << endl;
			for (int i = 1; i < n + 1; i++) {
				for (int j = 1; j < n + 1; j++) {
					cout << gReverse[i][j] << " ";
				}
				cout << endl;
			}
			break;

		}
		case 7:
		{
			return 0;
			break;
		}
		}
	}
	return 0;
}
